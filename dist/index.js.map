{
  "version": 3,
  "sources": ["../lib/main.js", "../lib/index.js"],
  "sourcesContent": ["/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isComplexTypedArray = require( '@stdlib/array-base-assert-is-complex-typed-array' );\nvar isAccessorArray = require( '@stdlib/array-base-assert-is-accessor-array' );\nvar resolveGetter = require( '@stdlib/array-base-resolve-getter' );\nvar reinterpret = require( '@stdlib/strided-base-reinterpret-complex' );\n\n\n// FUNCTIONS //\n\n/**\n* Counts the number of falsy values in an indexed array.\n*\n* @private\n* @param {Collection} x - input array\n* @returns {NonNegativeInteger} number of falsy values\n*\n* @example\n* var x = [ 0, 1, 0, 1, 1 ];\n*\n* var n = indexed( x );\n* // returns 2\n*/\nfunction indexed( x ) {\n\tvar n;\n\tvar i;\n\n\tn = 0;\n\tfor ( i = 0; i < x.length; i++ ) {\n\t\tif ( !x[ i ] ) {\n\t\t\tn += 1;\n\t\t}\n\t}\n\treturn n;\n}\n\n/**\n* Counts the number of falsy values in an accessor array.\n*\n* @private\n* @param {Collection} x - input array\n* @returns {NonNegativeInteger} number of falsy values\n*\n* @example\n* var toAccessorArray = require( '@stdlib/array-base-to-accessor-array' );\n*\n* var x = toAccessorArray( [ 0, 1, 0, 1, 1 ] );\n*\n* var n = accessors( x );\n* // returns 2\n*/\nfunction accessors( x ) {\n\tvar get;\n\tvar n;\n\tvar i;\n\n\tget = resolveGetter( x );\n\n\tn = 0;\n\tfor ( i = 0; i < x.length; i++ ) {\n\t\tif ( !get( x, i ) ) {\n\t\t\tn += 1;\n\t\t}\n\t}\n\treturn n;\n}\n\n/**\n* Counts the number of falsy values in a complex array.\n*\n* @private\n* @param {Collection} x - input array\n* @returns {NonNegativeInteger} number of falsy values\n*\n* @example\n* var Complex128Array = require( '@stdlib/array-complex128' );\n*\n* var x = new Complex128Array( [ 1.0, 2.0, 0.0, 0.0, 3.0, 4.0, 0.0, 0.0, 5.0, 6.0 ] );\n*\n* var n = complex( x );\n* // returns 2\n*/\nfunction complex( x ) {\n\tvar view;\n\tvar n;\n\tvar i;\n\n\tview = reinterpret( x, 0 );\n\n\tn = 0;\n\tfor ( i = 0; i < view.length; i += 2 ) {\n\t\tif ( view[ i ] === 0.0 && view[ i+1 ] === 0.0 ) {\n\t\t\tn += 1;\n\t\t}\n\t}\n\treturn n;\n}\n\n\n// MAIN //\n\n/**\n* Counts the number of falsy values in an array.\n*\n* @param {Collection} x - input array\n* @returns {NonNegativeInteger} number of falsy values\n*\n* @example\n* var x = [ 0, 1, 0, 1, 1 ];\n*\n* var n = countFalsy( x );\n* // returns 2\n*/\nfunction countFalsy( x ) {\n\tif ( isAccessorArray( x ) ) {\n\t\tif ( isComplexTypedArray( x ) ) {\n\t\t\treturn complex( x );\n\t\t}\n\t\treturn accessors( x );\n\t}\n\treturn indexed( x );\n}\n\n\n// EXPORTS //\n\nmodule.exports = countFalsy;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Count the number of falsy values in an array.\n*\n* @module @stdlib/array-base-count-falsy\n*\n* @example\n* var countFalsy = require( '@stdlib/array-base-count-falsy' );\n*\n* var x = [ 0, 1, 0, 1, 1 ];\n*\n* var n = countFalsy( x );\n* // returns 2\n*/\n\n// MODULES //\n\nvar main = require( './main.js' );\n\n\n// EXPORTS //\n\nmodule.exports = main;\n"],
  "mappings": "uGAAA,IAAAA,EAAAC,EAAA,SAAAC,EAAAC,EAAA,cAsBA,IAAIC,EAAsB,QAAS,kDAAmD,EAClFC,EAAkB,QAAS,6CAA8C,EACzEC,EAAgB,QAAS,mCAAoC,EAC7DC,EAAc,QAAS,0CAA2C,EAkBtE,SAASC,EAASC,EAAI,CACrB,IAAIC,EACA,EAGJ,IADAA,EAAI,EACE,EAAI,EAAG,EAAID,EAAE,OAAQ,IACpBA,EAAG,CAAE,IACVC,GAAK,GAGP,OAAOA,CACR,CAiBA,SAASC,EAAWF,EAAI,CACvB,IAAIG,EACAF,EACAG,EAKJ,IAHAD,EAAMN,EAAeG,CAAE,EAEvBC,EAAI,EACEG,EAAI,EAAGA,EAAIJ,EAAE,OAAQI,IACpBD,EAAKH,EAAGI,CAAE,IACfH,GAAK,GAGP,OAAOA,CACR,CAiBA,SAASI,EAASL,EAAI,CACrB,IAAIM,EACAL,EACAG,EAKJ,IAHAE,EAAOR,EAAaE,EAAG,CAAE,EAEzBC,EAAI,EACEG,EAAI,EAAGA,EAAIE,EAAK,OAAQF,GAAK,EAC7BE,EAAMF,CAAE,IAAM,GAAOE,EAAMF,EAAE,CAAE,IAAM,IACzCH,GAAK,GAGP,OAAOA,CACR,CAiBA,SAASM,EAAYP,EAAI,CACxB,OAAKJ,EAAiBI,CAAE,EAClBL,EAAqBK,CAAE,EACpBK,EAASL,CAAE,EAEZE,EAAWF,CAAE,EAEdD,EAASC,CAAE,CACnB,CAKAN,EAAO,QAAUa,IC9GjB,IAAIC,EAAO,IAKX,OAAO,QAAUA",
  "names": ["require_main", "__commonJSMin", "exports", "module", "isComplexTypedArray", "isAccessorArray", "resolveGetter", "reinterpret", "indexed", "x", "n", "accessors", "get", "i", "complex", "view", "countFalsy", "main"]
}
